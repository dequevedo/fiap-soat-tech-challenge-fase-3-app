name: Java Build & Deploy

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout do código
        uses: actions/checkout@v4

      - name: Configurar JDK
        uses: actions/setup-java@v4
        with:
          distribution: 'corretto'
          java-version: '21'

      - name: Construir e testar
        run: mvn clean install

      - name: Definir variáveis de versão
        run: echo "TIMESTAMP=$(date +'%Y%m%d-%H%M%S')" >> $GITHUB_ENV

      - name: Fazer login no Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2
        env:
          AWS_REGION: ${{ secrets.AWS_REGION }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Construir a imagem Docker com múltiplas tags
        run: |
          docker build -t ${{ vars.ECR_REGISTRY }}/${{ vars.ECR_REPOSITORY }}:${{ env.TIMESTAMP }} .
          docker tag ${{ vars.ECR_REGISTRY }}/${{ vars.ECR_REPOSITORY }}:${{ env.TIMESTAMP }} ${{ vars.ECR_REGISTRY }}/${{ vars.ECR_REPOSITORY }}:latest

      - name: Enviar a imagem para o Amazon ECR
        run: |
          docker push ${{ vars.ECR_REGISTRY }}/${{ vars.ECR_REPOSITORY }}:${{ env.TIMESTAMP }}
          docker push ${{ vars.ECR_REGISTRY }}/${{ vars.ECR_REPOSITORY }}:latest

  deploy:
    needs: build  # Só roda depois que o build finalizar
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'  # Só roda na branch main

    steps:
      - name: Checkout do código
        uses: actions/checkout@v4

      - name: Instalar Helm
        run: |
          curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash

      - name: Configurar acesso ao cluster
        run: |
          aws eks --region ${{ secrets.AWS_REGION }} update-kubeconfig --name ${{ vars.EKS_CLUSTER_NAME }}

      - name: Atualizar imagem no Helm
        run: |
          helm upgrade --install fiap-tech-challenge ./infra \
            --set app.image=${{ vars.ECR_REGISTRY }}/${{ vars.ECR_REPOSITORY }}:${{ env.TIMESTAMP }} \
            --namespace fiap-tech